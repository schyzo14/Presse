/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package client.distributeur.Vue.EnvoyerRecepisse;

import client.distributeur.ClientDistributeur;
import client.distributeur.Vue.Menu.MenuDistributeur;
import client.distributeur.Vue.ValiderContrat.ListContratAValider;
import client.distributeur.Vue.ValiderContrat.ValiderContrat;
import com.google.gson.Gson;
import com.google.gson.reflect.TypeToken;
import java.awt.Component;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.rmi.RemoteException;
import java.util.Date;
import java.util.HashMap;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultCellEditor;
import javax.swing.JButton;
import javax.swing.JCheckBox;
import javax.swing.JTable;
import javax.swing.UIManager;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableCellRenderer;
import javax.swing.table.TableColumn;
import presse.contrat;
import presse.distributeur;
import presse.editeur;
import presse.titre;

/**
 *
 * @author Aurore
 */
public class ListContratAttenteRecepisse extends javax.swing.JFrame {

    HashMap<Integer, contrat> lesContratsAttenteRecepisse = new HashMap<Integer, contrat>();
    
    /**
     * Creates new form ListContratAValider
     */
    public ListContratAttenteRecepisse() {
        initComponents();
        
        // On récupère le distributeur
        int distributeurId = ClientDistributeur.monDistributeur.getNumD();
        
        // Liste des contrats
        try {
            // liste contrat
            String s = ClientDistributeur.port.listeContratRecepisse(distributeurId);
            System.out.println(s);
            Gson gson = new Gson();
            java.lang.reflect.Type type = new TypeToken<HashMap<Integer, contrat>>(){}.getType();
            lesContratsAttenteRecepisse = gson.fromJson(s, type);
            
            // init tableau
            String[] columnNames = {"", "Titre", "Editeur", "Nombre de copies", "Durée", "Action"};
            DefaultTableModel modele = (DefaultTableModel) jTableContrat.getModel();
            Object[][] data = new Object[lesContratsAttenteRecepisse.size()][6];
            int i=0;
            
            for (int key : lesContratsAttenteRecepisse.keySet()) {
                contrat con = lesContratsAttenteRecepisse.get(key);
                
                // remplir le tableau
                data[i][0] = con.getNumC();
                data[i][1] = con.getTitreC().getNomT();
                data[i][2] = con.getEditeurC().getNomE();
                data[i][3] = con.getNbCopieC();
                data[i][4] = con.getDureeC();
                data[i][5] = "Répondre";
                i++;
            }
            
            DefaultTableModel model = new DefaultTableModel(data, columnNames);
            jTableContrat.setModel(model);

            TableColumn column = jTableContrat.getColumnModel().getColumn(5);
            column.setCellRenderer(new ListContratAttenteRecepisse.ButtonRenderer());
            column.setCellEditor(new ListContratAttenteRecepisse.ButtonEditor(new JCheckBox()));
        
        } catch (RemoteException ex) {
            Logger.getLogger(ListContratAValider.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabelListContrats = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTableContrat = new javax.swing.JTable();
        jButtonAnnuler = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Contrats en attentes de récépissés");

        jLabelListContrats.setText("Liste des contrats en attentes de récépissés");

        jTableContrat.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "", "Titre", "Editeur", "Nombre de copies", "Durée", "Action "
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(jTableContrat);

        jButtonAnnuler.setText("Annuler");
        jButtonAnnuler.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonAnnulerActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabelListContrats)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 791, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(jButtonAnnuler)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabelListContrats)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 213, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 24, Short.MAX_VALUE)
                .addComponent(jButtonAnnuler)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButtonAnnulerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonAnnulerActionPerformed
        // Menu
        MenuDistributeur menuDistributeur = new MenuDistributeur();
        menuDistributeur.setVisible(true);
        this.setVisible(false);
    }//GEN-LAST:event_jButtonAnnulerActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ListContratAttenteRecepisse.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ListContratAttenteRecepisse.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ListContratAttenteRecepisse.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ListContratAttenteRecepisse.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ListContratAttenteRecepisse().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButtonAnnuler;
    private javax.swing.JLabel jLabelListContrats;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTableContrat;
    // End of variables declaration//GEN-END:variables



    /**
* Inspiration du site : http://www.java2s.com/Code/Java/Swing-Components/ButtonTableExample.htm
*/    
    class ButtonRenderer extends JButton implements TableCellRenderer {

        public ButtonRenderer() {
            setOpaque(true);
        }

        public Component getTableCellRendererComponent(JTable table, Object value,
            boolean isSelected, boolean hasFocus, int row, int column) {
            if (isSelected) {
                setForeground(table.getSelectionForeground());
                setBackground(table.getSelectionBackground());
            } else {
                setForeground(table.getForeground());
                setBackground(UIManager.getColor("Button.background"));
            }
            setText((value == null) ? "" : value.toString());
            return this;
        }
    }

    class ButtonEditor extends DefaultCellEditor {
        protected JButton button;

        private String label;

        private boolean isPushed;
        
        private int row;

        public ButtonEditor(JCheckBox checkBox) {
            super(checkBox);
            button = new JButton();
            button.setOpaque(true);
            button.addActionListener(new ActionListener() {
                public void actionPerformed(ActionEvent e) {
                    fireEditingStopped();
                }
            });
        }

        public Component getTableCellEditorComponent(JTable table, Object value,
            boolean isSelected, int row, int column) {
            if (isSelected) {
                button.setForeground(table.getSelectionForeground());
                button.setBackground(table.getSelectionBackground());
            } else {
                button.setForeground(table.getForeground());
                button.setBackground(table.getBackground());
            }
            label = (value == null) ? "" : value.toString();
            button.setText(label);
            isPushed = true;
            this.row = row;
            return button;
        }

        public Object getCellEditorValue() {
            if (isPushed) {
                // On récupère l'id
                int id = (int) jTableContrat.getModel().getValueAt(row, 0);
                
                // Afficher le bon contrat en attente de cout
                contrat con = lesContratsAttenteRecepisse.get(id);
                
                EnvoyerRecepisse envoyerRecepisse = new EnvoyerRecepisse(con);
                envoyerRecepisse.setVisible(true);
                ListContratAttenteRecepisse.this.setVisible(false);
                
            }
            isPushed = false;
            return new String(label);
        }

        public boolean stopCellEditing() {
            isPushed = false;
            return super.stopCellEditing();
        }

        protected void fireEditingStopped() {
            super.fireEditingStopped();
        }
    }

}
